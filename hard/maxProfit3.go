package hard

/**
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。



示例1:

输入：prices = [3,3,5,0,0,3,1,4]
输出：6
解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
    随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
示例 4：

输入：prices = [1]
输出：0


提示：

1 <=prices.length <= 105
0 <=prices[i] <=105

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
/**
由于我们最多可以完成两笔交易，因此在任意一天结束之后，我们会处于以下五个状态中的一种：

0、未进行过任何操作；

1、只进行过一次买操作（不一定是当天买的也有可能是前面买过的但是还没卖）；

2、进行了一次买操作和一次卖操作，即完成了一笔交易；

3、在完成了一笔交易的前提下，进行了第二次买操作；

4、完成了全部两笔交易。

由于第一个状态的利润显然为 0，因此我们可以不用将其记录。对于剩下的四个状态


dp[i][0~4] 表示第i+1天 上述5个状态下手里的现金数量
逐个分析
dp[i][1] 1、第一次买 所以手里的现金就是 dp[i-1][0]-prices[i] 2、前面已经买过一次 dp[i-1][1] 取最大值
dp[i][2] 1、当天卖 dp[i-1][1]+prices[i] 2、前面已经完成了一次买和卖操作 dp[i-1][2] 取最大值
dp[i][3] 1、当天第二次买入操作 dp[i-1][2]-prices[i] 2、前面已经完成了买卖买操作 dp[i-1][3] 取最大值
dp[i][4] 1、当天第二次卖出操作 dp[i-1][3]+prices[i] 2、前面已经完成了买卖买卖操作 dp[i-1][4] 取最大值

dp初始化
dp[0][0] = 0
dp[0][1] = -prices[0]
dp[0][2] = 0
dp[0][3] = -prices[0]
dp[0][4] = 0

*/
func maxProfit3(prices []int) int {
	l := len(prices)
	dp := make([][]int, l)
	maxInt := func(i, j int) int {
		if j > i {
			return j
		}
		return i
	}
	for idx, _ := range dp {
		dp[idx] = make([]int, 5)
	}
	dp[0][0] = 0
	dp[0][1] = -prices[0]
	dp[0][2] = 0
	dp[0][3] = -prices[0]
	dp[0][4] = 0
	for i := 1; i < l; i++ {
		dp[i][0] = 0 //第i天都没有进行任何操作 手里现金肯定为0
		dp[i][1] = maxInt(dp[i-1][0]-prices[i], dp[i-1][1])
		dp[i][2] = maxInt(dp[i-1][1]+prices[i], dp[i-1][2])
		dp[i][3] = maxInt(dp[i-1][2]-prices[i], dp[i-1][3])
		dp[i][4] = maxInt(dp[i-1][3]+prices[i], dp[i-1][4])
	}
	profit := 0
	for _, v := range dp[l-1] {
		if v >= profit {
			profit = v
		}
	}
	return profit
}
